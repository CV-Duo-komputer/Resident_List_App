{"version":3,"sources":["Component/Additem/todoitems/Todoitems.js","Component/Additem/AddItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","items","deleteItem","ListItems","length","map","item","key","id","className","name","age","onClick","AddItem","state","handelChange","e","setState","target","value","handleSubmit","preventDefault","addItem","onSubmit","this","type","placeholder","onChange","Component","App","filter","Math","random","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSA+BeA,G,YA7BG,SAACC,GAAW,IAClBC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,WAETC,EADOF,EAAMG,OACSH,EAAMI,KAAI,SAAAC,GAClC,OACI,yBAAKC,IAAKD,EAAKE,IACX,0BAAMC,UAAU,QAAQH,EAAKI,MAC7B,0BAAMD,UAAU,OAAOH,EAAKK,KAC5B,0BAAMF,UAAU,cAAcG,QAAS,kBAAMV,EAAWI,EAAKE,MAA7D,YAIL,uDACP,OACI,yBAAKC,UAAU,aACX,6BACI,0BAAMA,UAAU,cAAhB,UACA,0BAAMA,UAAU,aAAhB,SACA,0BAAMA,UAAU,gBAAhB,cAIHN,K,OCgBEU,G,kNArCXC,MAAQ,CACJJ,KAAM,GACNC,IAAM,I,EAEVI,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOV,GAAMQ,EAAEE,OAAOC,S,EAI7BC,aAAe,SAACJ,GAEZ,GADAA,EAAEK,iBACyB,KAAxBL,EAAEE,OAAOR,KAAKS,MACb,OAAO,EAEP,EAAKnB,MAAMsB,QAAQ,EAAKR,OAC5B,EAAKG,SAAS,CACVP,KAAM,GACNC,IAAI,M,uDAMZ,OACI,6BACG,0BAAMY,SAAUC,KAAKJ,cAChC,2BAAOK,KAAO,OAAOC,YAAY,gBAAgBlB,GAAK,OAAOmB,SAAUH,KAAKT,aAAcI,MAAQK,KAAKV,MAAMJ,OAC7G,2BAAOe,KAAO,SAASC,YAAY,eAAelB,GAAK,MAAMmB,SAAUH,KAAKT,aAAcI,MAAOK,KAAKV,MAAMH,MAC5G,2BAAOc,KAAO,SAASN,MAAM,c,GA9BPS,cCuCPC,E,4MApCbf,MAAQ,CACVb,MAAQ,CACR,CAACO,GAAG,EAAEE,KAAK,OAAOC,IAAI,IACtB,CAACH,GAAG,EAAEE,KAAK,WAAWC,IAAI,IAC1B,CAACH,GAAG,EAAEE,KAAK,UAAUC,IAAI,M,EAIzBT,WAAa,SAACM,GACZ,IAAIP,EAAQ,EAAKa,MAAMb,MAAM6B,QAAO,SAAAxB,GAClC,OAAOA,EAAKE,KAAOA,KAEtB,EAAKS,SAAS,CAAChB,W,EAGhBqB,QAAU,SAAChB,GACTA,EAAKE,GAAKuB,KAAKC,SACjB,IAAI/B,EAAQ,EAAKa,MAAMb,MACvBA,EAAMgC,KAAK3B,GACX,EAAKW,SAAS,CAAChB,MAAMA,K,uDAKpB,OACG,yBAAKQ,UAAU,iBACd,wBAAIA,UAAY,eAAhB,qBACC,kBAAC,EAAD,CAAWR,MAASuB,KAAKV,MAAMb,MAAOC,WAAcsB,KAAKtB,aACzD,kBAAC,EAAD,CAAUoB,QAASE,KAAKF,e,GA7BZM,aCQEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7578664f.chunk.js","sourcesContent":["import React from 'react'\nimport './Todoitem.css'\nconst TodoItems = (props) => {\n    const { items, deleteItem } = props;\n    let length = items.length;\n    const ListItems = length ? (items.map(item => {\n        return (\n            <div key={item.id}>\n                <span className=\"name\">{item.name}</span>\n                <span className=\"age\">{item.age}</span>\n                <span className=\"action icon\" onClick={() => deleteItem(item.id)}>&times;</span>\n\n            </div>\n        )\n    })) : (<p>There is no item to show</p>)\n    return (\n        <div className=\"ListItems\">\n            <div>\n                <span className=\"name title\">\"Name\"</span>\n                <span className=\"age title\">\"Age\"</span>\n                <span className=\"action title\">\"Action \"</span>\n\n            </div>\n\n            {ListItems}\n        </div>\n\n    )\n\n\n}\nexport default TodoItems;","import React , {Component} from 'react'\nimport './AddItem.css'\nclass AddItem extends Component {\n    state = {\n        name :'',\n        age : ''\n    }\n    handelChange = (e) => {\n      this.setState({\n        [e.target.id] : e.target.value\n      })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if(e.target.name.value === ''){\n            return false\n        }else {\n            this.props.addItem(this.state)\n        this.setState({\n            name: '',\n            age:''\n        })\n        }\n    }\n\nrender(){\n    return(\n        <div>\n           <form onSubmit={this.handleSubmit}>\n<input type = \"text\" placeholder=\"Enter name...\" id = \"name\" onChange={this.handelChange} value= {this.state.name} />\n<input type = \"number\" placeholder=\"Enter age...\" id = \"age\" onChange={this.handelChange} value={this.state.age} />\n<input type = \"submit\" value=\"Add\"/>\n\n           </form>\n        </div>\n    )\n}\n\n}\nexport default AddItem;","import React , {Component} from 'react';\nimport './App.css';\nimport TodoItems from './Component/Additem/todoitems/Todoitems';\nimport Additem from './Component/Additem/AddItem'\nclass App extends Component{\n  state = {\nitems : [\n{id:1,name:\"Saad\",age:24},\n{id:2,name:\"Gregorio\",age:28},\n{id:3,name:\"Delpero\",age:38}\n]\n  }\n\ndeleteItem = (id) => {\n  let items = this.state.items.filter(item =>{\n    return item.id !== id\n  })\n this.setState({items})\n}\n\naddItem = (item) => {\n  item.id = Math.random();\nlet items = this.state.items;\nitems.push(item);\nthis.setState({items:items})\n}\n\nrender(){\n\n return (\n    <div className=\"App containar\">\n     <h1 className = \"text-center\">List of Rrsidents</h1> \n      <TodoItems items = {this.state.items} deleteItem = {this.deleteItem} />\n      <Additem  addItem={this.addItem}/>\n    </div>\n  );\n\n}\n\n}\n\nexport default App;\n//Saad ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}